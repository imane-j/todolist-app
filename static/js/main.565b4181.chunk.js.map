{"version":3,"sources":["confetti.svg","plus.svg","Components/Todos.js","Components/AddForm.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Todos","visualizeToDo","deleteToDo","todoList","length","map","item","className","key","id","onClick","type","htmlFor","content","src","confetti","alt","AddForm","state","handleChange","e","setState","target","value","handleSubmit","preventDefault","props","addToDo","onSubmit","this","plus","onChange","Component","App","todos","itemToDelete","items","filter","newItem","Math","random","updatedState","event","Date","toLocaleDateString","weekday","year","month","day","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iGAAAA,EAAOC,QAAU,IAA0B,sC,gBCA3CD,EAAOC,QAAU,IAA0B,kC,6NC0B5BC,EAvBD,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,cAAeC,EAAiB,EAAjBA,WACtBC,EAAWF,EAAcG,OAAUH,EAAcI,KAAI,SAAAC,GACpD,OACK,yBAAKC,UAAU,iCAAiCC,IAAMF,EAAKG,IAC3D,2BAAOC,QAAS,kBAAMR,EAAWI,EAAKG,KAAKE,KAAK,WAAWJ,UAAU,uBAAuBE,GAAG,iBAC/F,2BAAOC,QAAS,kBAAMR,EAAWI,EAAKG,KAAKF,UAAU,uBAAuBK,QAAQ,gBAAiBN,EAAKO,aAMtH,yBAAKN,UAAU,mBAAf,2CACyC,oDACrC,yBAAKO,IAAMC,IAAWC,IAAI,uBAG9B,OACI,6BACMb,I,gBCYCc,E,2MA7BXC,MAAQ,CACJL,QAAS,I,EAEbM,aAAe,SAACC,GACZ,EAAKC,SAAS,CACVR,QAASO,EAAEE,OAAOC,S,EAI1BC,aAAe,SAAAJ,GACXA,EAAEK,iBACF,EAAKC,MAAMC,QAAQ,EAAKT,OACxB,EAAKG,SAAS,CACVR,QAAS,M,wEAKb,OACI,0BAAMe,SAAUC,KAAKL,cACjB,6DACA,yBAAKjB,UAAU,iBACX,yBAAKA,UAAU,sBAAsBO,IAAKgB,IAAMd,IAAI,KACpD,2BAAOL,KAAK,OAAOoB,SAAUF,KAAKV,aAAcI,MAAOM,KAAKX,MAAML,gB,GAxBhEmB,aC6DPC,E,2MAxDbf,MAAQ,CACNgB,MAAO,CACL,CACEzB,GAAI,EACJI,QAAS,qBAEX,CACEJ,GAAI,EACJI,QAAS,sBAEX,CACEJ,GAAI,EACJI,QAAS,kC,EAKfX,WAAa,SAACiC,GACZ,IAAMC,EAAQ,EAAKlB,MAAMgB,MAAMG,QAAO,SAAC/B,GACtC,OAAOA,EAAKG,KAAO0B,KAEpB,EAAKd,SAAS,CACZa,MAAOE,K,EAKXT,QAAU,SAACW,GACTA,EAAQ7B,GAAK8B,KAAKC,SAClB,IAAMC,EAAY,sBAAO,EAAKvB,MAAMgB,OAAlB,CAAyBI,IAC3C,EAAKjB,SAAS,CACZa,MAAOO,K,wEAOT,IAAIC,EAAQ,IAAIC,KAEhB,OACE,yBAAKpC,UAAU,OACb,yBAAKA,UAAU,aACf,yBAAKA,UAAU,eACf,oDACE,4BAAKmC,EAAME,mBAAmB,QANtB,CAAEC,QAAS,OAAQC,KAAM,UAAWC,MAAO,OAAQC,IAAK,aAQhE,kBAAC,EAAD,CAAO/C,cAAe4B,KAAKX,MAAMgB,MAAOhC,WAAY2B,KAAK3B,aACzD,kBAAC,EAAD,CAASyB,QAASE,KAAKF,gB,GAjDfK,aCKEiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.565b4181.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/confetti.1c91d5d0.svg\";","module.exports = __webpack_public_path__ + \"static/media/plus.8e665ca8.svg\";","import React from 'react';\r\nimport confetti from '../confetti.svg';\r\n\r\nconst Todos = ({ visualizeToDo, deleteToDo }) => {\r\n    const todoList = visualizeToDo.length ? (visualizeToDo.map(item => {\r\n           return (\r\n                <div className=\"custom-control custom-checkbox\" key={ item.id }>\r\n                <input onClick={() => deleteToDo(item.id)} type=\"checkbox\" className=\"custom-control-input\" id=\"customCheck1\" />\r\n                <label onClick={() => deleteToDo(item.id)} className=\"custom-control-label\" htmlFor=\"customCheck1\">{ item.content }</label>\r\n                </div>\r\n           )\r\n    }))\r\n    :\r\n    (\r\n    <div className=\"congratulations\">\r\n        Vous avez terminé toutes vos taches! <strong>Congratulations!</strong>\r\n        <img src={ confetti } alt=\"Célébration\"/>\r\n    </div>);\r\n\r\n    return (\r\n        <div>\r\n            { todoList }\r\n        </div>\r\n    )\r\n   \r\n}\r\nexport default Todos;","import React, { Component } from 'react';\r\nimport plus from '../plus.svg';\r\n\r\nclass AddForm extends Component {\r\n    state = {\r\n        content: ''\r\n    }\r\n    handleChange = (e) => {\r\n        this.setState({\r\n            content: e.target.value\r\n        })\r\n    }\r\n\r\n    handleSubmit = e => {\r\n        e.preventDefault();\r\n        this.props.addToDo(this.state);\r\n        this.setState({\r\n            content: ''\r\n        })\r\n\r\n    }\r\n    render() {\r\n        return (\r\n            <form onSubmit={this.handleSubmit}>\r\n                <h5>Ajoutez une nouvelle tache : </h5>\r\n                <div className=\"titre-ajouter\">\r\n                    <img className=\"hvr-wobble-vertical\" src={plus} alt=\"\"/>\r\n                    <input type=\"text\" onChange={this.handleChange} value={this.state.content}/>\r\n                </div>\r\n            </form>\r\n        );\r\n    }\r\n}\r\nexport default AddForm;\r\n\r\n\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport Todos from './Components/Todos';\nimport AddForm from './Components/AddForm';\n\n\n\nclass App extends Component {\n  state = {\n    todos: [\n      {\n        id: 1,\n        content: \"Faire les courses\"\n      },\n      {\n        id: 2,\n        content: \"Acheter 2L de lait\"\n      },\n      {\n        id: 3,\n        content: \"Résilier l'offre internet\"\n      }\n    ]\n  }\n\n  deleteToDo = (itemToDelete)  => {\n    const items = this.state.todos.filter((item) => {\n     return item.id !== itemToDelete\n    })\n    this.setState({\n      todos: items\n\n    })\n  }\n\n  addToDo = (newItem) => {\n    newItem.id = Math.random();\n    const updatedState = [...this.state.todos, newItem];\n    this.setState({\n      todos: updatedState\n    })\n  }\n \n\n  render() {\n \n    var event = new Date();\n    var options = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' };\n    return (\n      <div className=\"App\">\n        <div className=\"deco-nav\"></div>\n        <div className=\"app-contenu\">\n        <p>Liste des taches de :</p>\n          <h2>{event.toLocaleDateString('fr-FR', options)}</h2>\n          \n          <Todos visualizeToDo={this.state.todos} deleteToDo={this.deleteToDo} />\n          <AddForm addToDo={this.addToDo} />\n        </div> \n      </div>\n    );\n  }\n \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}